#version 410 core

uniform float fGlobalTime; // in seconds
uniform vec2 v2Resolution; // viewport resolution (in pixels)
uniform float fFrameTime; // duration of the last frame, in seconds

uniform sampler1D texFFT; // towards 0.0 is bass / lower freq, towards 1.0 is higher / treble freq
uniform sampler1D texFFTSmoothed; // this one has longer falloff and less harsh transients
uniform sampler1D texFFTIntegrated; // this is continually increasing
uniform sampler2D texPreviousFrame; // screenshot of the previous frame
uniform sampler2D texChecker;
uniform sampler2D texNoise;
uniform sampler2D texTex1;
uniform sampler2D texTex2;
uniform sampler2D texTex3;
uniform sampler2D texTex4;

in vec2 out_texcoord;
vec2 uv;
layout(location = 0) out vec4 out_color; // out_color must be written in order to see anything

const int MAX_MARCHING_STEPS = 255;
const float MIN_DIST = 0.0;
const float MAX_DIST = 100.0;
const float EPSILON = 0.0001;

// ------------- Math -----------------

float rand() {
  return fract(sin(dot(out_texcoord.xy,vec2(12.9898*fGlobalTime,78.233)))*20000);
}

float rand(float _min, float _max) {
  return fract(sin(dot(out_texcoord.xy,vec2(12.9898*fGlobalTime,78.233)))*20000)*_max + _min;
}
// --------------------------------------

// ------------- FFT Utils --------------

float getBassPeak()
{
  float bassFreq = 0.0025;
  
  
  /*float bassPeak = 0;
  int nSample = 0;
  for(float a = min_; a < max_; a += 0.0001)
  {
    bassPeak += texture(texFFT, a).r;
    nSample++;
  }  
  bassPeak /= nSample;*/
  
  float bassPeak = texture(texFFT, bassFreq).r;
  
  bassPeak = smoothstep(0.01f,0.25f,bassPeak);

  return bassPeak;
}
// --------------------------------------

// ------------- SDF --------------------

// ------------- 2D

float circle(in vec2 _st, in float _radius){
  return 1.-smoothstep(_radius-(_radius*0.01),_radius+(_radius*0.01),dot(uv-_st,uv-_st)*4.0);
}

float circle2(in vec2 _st, in float _radius){
  return 1.0-(distance(uv-_st, _st)*_radius);
}

// ----------------

float sdSphere( vec3 p, float s )
{
  return length(p)-s;
}
// --------------------------------------
float sceneSDF(vec3 samplePoint) {
    return sdSphere(samplePoint, 1.0f);
}

float shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {
    float depth = start;
    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {
        float dist = sceneSDF(eye + depth * marchingDirection);
        if (dist < EPSILON) {
      return depth;
        }
        depth += dist;
        if (depth >= end) {
            return end;
        }
    }
    return end;
}

vec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {
    vec2 xy = fragCoord - size / 2.0;
    float z = size.y / tan(radians(fieldOfView) / 2.0);
    return normalize(vec3(xy, -z));
}

void main(void)
{
  uv = vec2(gl_FragCoord.x / v2Resolution.x, gl_FragCoord.y / v2Resolution.y);
  uv -= 0.5;
  uv /= vec2(v2Resolution.y / v2Resolution.x, 1);

  float bassPeak = getBassPeak();
  vec4 bassBackground = vec4(bassPeak);
  
  vec2 pos1 = vec2(sin(fGlobalTime/2)/16,cos(fGlobalTime/2)/16);
  
  vec2 pos = vec2(0,0)-uv;
  float r = length(pos)*5;
  float a = sin(atan(pos.y,pos.x) + fGlobalTime/4);
  float a2 = (atan(pos.y,pos.x)) + fGlobalTime/10;
  a2 = a2 * a/200;

  float f = sin(a*cos(fGlobalTime/10)*8 + bassPeak*10) * cos(a*sin(fGlobalTime/8)*8 + bassPeak*10)+1;
  float f2 = tan(a2*50+cos(fGlobalTime/10)*100 + bassPeak*1) * cos(fGlobalTime)+1 +bassPeak;
  
  f = max(f,f2);
  
  vec3 color = vec3( fract(1.-smoothstep(f,f+0.5,r)) );
  vec3 color2 = vec3( fract(1.-smoothstep(f2,f2+0.6,r)) );
  
  vec3 colorFilter = vec3(cos(fGlobalTime*(uv.y*uv.x)),cos(fGlobalTime*uv.x*2+1.6),1-cos(fGlobalTime*uv.y*2+2));
  
  
  
  out_color =  vec4(color*colorFilter,1) ;
  
  
  //out_color = vec4(uv.x,uv.y,0,0);
  
  //out_color += bassBackground/2;
  
}
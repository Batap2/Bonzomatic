#version 410 core

uniform float t; // in seconds
uniform vec2 v2Resolution; // viewport resolution (in pixels)
uniform float fFrameTime; // duration of the last frame, in seconds

uniform sampler1D texFFT; // towards 0.0 is bass / lower freq, towards 1.0 is higher / treble freq
uniform sampler1D texFFTSmoothed; // this one has longer falloff and less harsh transients
uniform sampler1D texFFTIntegrated; // this is continually increasing
uniform sampler2D texPreviousFrame; // screenshot of the previous frame
uniform sampler2D texChecker;
uniform sampler2D texNoise;
uniform sampler2D texTex1;
uniform sampler2D texTex2;
uniform sampler2D texTex3;
uniform sampler2D texTex4;

in vec2 out_texcoord;
vec2 uv;
layout(location = 0) out vec4 out_color; // out_color must be written in order to see anything

const int MAX_MARCHING_STEPS = 200;
const float MIN_DIST = 0.0f;
const float MAX_DIST = 1000.0;
const float EPSILON = 0.0001;
const float PI = 3.141592;

// ------------- Math -----------------

float rand() {
  return fract(sin(dot(out_texcoord.xy,vec2(12.9898*t,78.233)))*20000);
}

float rand(float _min, float _max) {
  return fract(sin(dot(out_texcoord.xy,vec2(12.9898*t,78.233)))*20000)*_max + _min;
}
// --------------------------------------

// ------------- FFT Utils --------------

float getBassPeak()
{
  float bassFreq = 0.0025;
  
  
  /*float bassPeak = 0;
  int nSample = 0;
  for(float a = min_; a < max_; a += 0.0001)
  {
    bassPeak += texture(texFFT, a).r;
    nSample++;
  }  
  bassPeak /= nSample;*/
  
  float bassPeak = texture(texFFT, bassFreq).r;
  
  bassPeak = smoothstep(0.01f,0.25f,bassPeak);

  return bassPeak;
}
// --------------------------------------

// ------------- SDF --------------------

// ------------- 2D

float circle(in vec2 _st, in float _radius){
  return 1.-smoothstep(_radius-(_radius*0.01),_radius+(_radius*0.01),dot(uv-_st,uv-_st)*4.0);
}

float sdCircle(in vec2 _st, in float _radius){
	return distance(uv-_st, _st)-_radius;
}

float sdArc( in vec2 p, in vec2 sc, in float ra, float rb )
{
    // sc is the sin/cos of the arc's aperture
    p.x = abs(p.x);
    return ((sc.y*p.x>sc.x*p.y) ? length(p-sc*ra) : 
                                  abs(length(p)-ra)) - rb;
}

float sdEquilateralTriangle(  in vec2 p, in float r )
{
    const float k = sqrt(3.0);
    p.x = abs(p.x) - r;
    p.y = p.y + r/k;
    if( p.x+k*p.y>0.0 ) p=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;
    p.x -= clamp( p.x, -2.0*r, 0.0 );
    return -length(p)*sign(p.y);
}

float neonCosLine(float function, float mult, float glow)
  {
    float delta = 1/(abs(uv.x - function));
    delta *= mult;
    delta = pow(delta, glow);
    return delta;
  }

// ----------------

float sdSphere( vec3 p, float s )
{
  return length(p)-s;
}

float sdPlane( vec3 p, vec3 n, float h )
{
  return dot(p,n) + h;
}

// --------------------------------------

// -------------- Ray Marching ----------------

float GetDist(vec3 p)
{
    float sphereDist = sdSphere(p - vec3(0,1.2,0),1);
	float sphereDist2 = sdSphere(p - vec3(5,1.2,10),2);
    float planeDist = sdPlane(p - vec3(0,0,0), vec3(0,1,0),0);
    float d = min(min(sphereDist,planeDist),sphereDist2);
	
    return d;
}

float RayMarch(vec3 ro, vec3 rd) 
{
    float dO = 0.; //Distane Origin
    for(int i=0;i<MAX_MARCHING_STEPS;i++)
    {
        vec3 p = ro + rd * dO;
        float ds = GetDist(p); // ds is Distance Scene
        dO += ds;
        if(dO > MAX_DIST){
			return 0.;
		};
		if(ds < MIN_DIST)
		{
			break;
		}
    }
    return log(dO);
}

// --------------------------------------------

void main(void)
{
	uv = vec2(gl_FragCoord.x / v2Resolution.x, gl_FragCoord.y / v2Resolution.y) - 0.5;
	//uv = fract(uv*10)-0.5;
	uv /= vec2(v2Resolution.y / v2Resolution.x, 1);
	
	vec3 ro = vec3(sin(t),cos(t)+2,-10); // Ray Origin/ Camera
    vec3 rd = normalize(vec3(0,0,1) + vec3(uv.x,uv.y,0));
    float d = RayMarch(ro,rd); // Distance
    d/= 10.;
    vec3 color = vec3(d);
     
	
	out_color = vec4(color,0);
}
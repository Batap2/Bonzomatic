#version 410 core

uniform float t; // in seconds
uniform vec2 v2Resolution; // viewport resolution (in pixels)
uniform float fFrameTime; // duration of the last frame, in seconds

uniform sampler1D texFFT; // towards 0.0 is bass / lower freq, towards 1.0 is higher / treble freq
uniform sampler1D texFFTSmoothed; // this one has longer falloff and less harsh transients
uniform sampler1D texFFTIntegrated; // this is continually increasing
uniform sampler2D texPreviousFrame; // screenshot of the previous frame
uniform sampler2D texChecker;
uniform sampler2D texNoise;
uniform sampler2D texTex1;
uniform sampler2D texTex2;
uniform sampler2D texTex3;
uniform sampler2D texTex4;

in vec2 out_texcoord;
vec2 uv;
layout(location = 0) out vec4 out_color; // out_color must be written in order to see anything

const int MAX_MARCHING_STEPS = 40;
const float MIN_DIST = 0.0f;
const float MAX_DIST = 1000;
const float EPSILON = 0.0001;
const float PI = 3.141592;

struct Light
{
	vec3 p;
	vec3 c;
};

// ------------- Math -----------------

float rand() {
  return fract(sin(dot(out_texcoord.xy,vec2(12.9898*t,78.233)))*20000);
}

float rand(float _min, float _max) {
  return fract(sin(dot(out_texcoord.xy,vec2(12.9898*t,78.233)))*20000)*_max + _min;
}

vec3 rotateVector(vec3 v, vec3 axis, float angle) {
    float halfAngle = angle * 0.5;
    vec3 quaternion = axis * sin(halfAngle);
    float scalar = cos(halfAngle);

    vec3 rotatedVec = v * (2.0 * dot(quaternion, v)) +
                      cross(quaternion, v) * scalar +
                      cross(quaternion, cross(quaternion, v));

    return rotatedVec;
}

// --------------------------------------

// --------------- Utils ----------------
vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}

vec3 pcol(in float t){
	return palette(t, vec3(-0.5,0.5,-0.5), vec3(-1.47,1.8,1.198), vec3(0.5,1,0.5), vec3(0.5,0,-0.5));
}
// --------------------------------------

// ------------- FFT Utils --------------

float getBassPeak()
{
  float bassFreq = 0.0025;
  
  
  /*float bassPeak = 0;
  int nSample = 0;
  for(float a = min_; a < max_; a += 0.0001)
  {
    bassPeak += texture(texFFT, a).r;
    nSample++;
  }  
  bassPeak /= nSample;*/
  
  float bassPeak = texture(texFFT, bassFreq).r;
  
  bassPeak = smoothstep(0.01f,0.25f,bassPeak);

  return bassPeak;
}
// --------------------------------------

// ------------- Lighting ------------------
vec3 phong(vec3 lightPos, vec3 viewPos, vec3 normal, vec3 lightColor, vec3 objectColor, vec3 fragPos, float ambientStrength, float specularStrength, float shininess)
{
    vec3 lightDir = normalize(lightPos - fragPos);
    vec3 viewDir = normalize(viewPos - fragPos);
    vec3 reflectDir = reflect(-lightDir, normal);

    vec3 ambient = ambientStrength * objectColor;
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = diff * objectColor;

    vec3 specular = vec3(0.0);
    if (diff > 0.0) {
        vec3 halfwayDir = normalize(lightDir + viewDir);
        float spec = pow(max(dot(normal, halfwayDir), 0.0), shininess);
        specular = specularStrength * spec * lightColor;
    }

    vec3 result = (ambient + diffuse + specular) * lightColor;

    return result;
}
// --------------------------------------

// ------------- SDF Utils --------------
vec2 min_ck( in float a, in float b, in float k )
{
    float f1 = exp2( -k*a );
    float f2 = exp2( -k*b );
    return vec2(-log2(f1+f2)/k,f2);
}

vec4 min_c(vec4 a, vec4 b){
	return a.w < b.w ? a : b;
}

vec4 smin_c( vec4 a, vec4 b, float k )
{
    k *= 1.0/(1.0-sqrt(0.5));
    float h = max( k-abs(a.w-b.w), 0.0 )/k;
	vec4 m = min_c(a,b);
	m.w -= k*0.5*(1.0+h-sqrt(1.0-h*(h-2.0)));
	m.xyz = mix(a.xyz,b.xyz, min_ck(a.w,b.w,5).y);
    return m;
}


// --------------------------------------

// ------------- SDF --------------------

// ------------- 2D

float circle(in vec2 _st, in float _radius){
  return 1.-smoothstep(_radius-(_radius*0.01),_radius+(_radius*0.01),dot(uv-_st,uv-_st)*4.0);
}

float sdCircle(in vec2 _st, in float _radius){
	return distance(uv-_st, _st)-_radius;
}

float sdArc( in vec2 p, in vec2 sc, in float ra, float rb )
{
    // sc is the sin/cos of the arc's aperture
    p.x = abs(p.x);
    return ((sc.y*p.x>sc.x*p.y) ? length(p-sc*ra) : 
                                  abs(length(p)-ra)) - rb;
}

float sdEquilateralTriangle(  in vec2 p, in float r )
{
    const float k = sqrt(3.0);
    p.x = abs(p.x) - r;
    p.y = p.y + r/k;
    if( p.x+k*p.y>0.0 ) p=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;
    p.x -= clamp( p.x, -2.0*r, 0.0 );
    return -length(p)*sign(p.y);
}

float neonCosLine(float function, float mult, float glow)
  {
    float delta = 1/(abs(uv.x - function));
    delta *= mult;
    delta = pow(delta, glow);
    return delta;
  }

// --------- 3D --------------

float sdSphere( vec3 p, float s )
{
  return length(p)-s;
}

float sdPlane( vec3 p, vec3 n, float h )
{
  return dot(p,n) + h;
}

// --------------------------------------

// -------------- Ray Marching ----------------

vec4 sdfs(vec3 p)
{
	
	p.x += t;
	p.z += t*20;
	
		
	// space repetition
	float space = 6;
	p = p - space*round(p/space);

	
    vec4 s1 = vec4(1,0,0,sdSphere(p - vec3(0,sin(t)*1.5,0),0.5));
	vec4 s2 = vec4(0,1,0,sdSphere(p - vec3(0,-sin(t)*1.5,0),0.5));
	vec4 s3 = vec4(1,0,0,sdSphere(p - vec3(sin(t)*1.5,0,0),0.5));
	vec4 s4 = vec4(0,1,0,sdSphere(p - vec3(-sin(t)*1.5,0,0),0.5));
    vec4 d = smin_c(smin_c(smin_c(s1,s2, 0.2), s3, 0.2),s4,0.2);
	
    return d;
}

vec3 calcNormal( in vec3 p ) // for function f(p)
{
    const float eps = 0.0001; // or some other value
    const vec2 h = vec2(eps,0);
    return normalize( vec3(sdfs(p+h.xyy).w - sdfs(p-h.xyy).w,
                           sdfs(p+h.yxy).w - sdfs(p-h.yxy).w,
                           sdfs(p+h.yyx).w - sdfs(p-h.yyx).w ) );
}

vec4 RayMarch(vec3 ro, vec3 rd) 
{
    vec4 dO = vec4(0,0,0,0); //Distane Origin
    for(int i=0;i<MAX_MARCHING_STEPS;i++)
    {
		
		vec3 p = ro + rd * dO.w;
		
		p.x += sin(dO.w*0.1 * cos(t/2))*2;
		p.y += cos(dO.w*0.1 * cos(t/2))*2;
		
        vec4 ds = sdfs(p); // ds is Distance Scene
		dO.xyz = ds.xyz;
        dO.w += ds.w;
        if(dO.w > MAX_DIST){
			return vec4(0,0,0,MAX_DIST);
		};
		if(ds.w < MIN_DIST)
		{
			break;
		}
    }
    return dO;
}

vec3 computeColor(vec3 ro, vec3 rd)
{	
	
	vec4 d = RayMarch(ro,rd); // Distance
	
	if(d.w == MAX_DIST)
		return vec3(0,0,0);

	vec3 p = ro + rd * d.w;
	vec3 n = calcNormal(p);
    d.w/= 10.;
	
	Light l = Light(ro, vec3(1,1,1));
	
	vec3 phong = phong(l.p, ro, n, l.c, pcol(d.w/20 + t/10), p, 0.2, 1, 1000*((cos(t)+1))+100);
	
	float shadow = RayMarch(p + n/100000,normalize(l.p - p)).w;
	shadow = 1 - step(0.000001, shadow)/4;
	

	return vec3(pcol(d.w/20 + t/20));

    //return vec3(step(0.00001,d)*texture(texChecker, vec2(fract(p.x), fract(p.y))));
}

// --------------------------------------------

void main(void)
{
	uv = vec2(gl_FragCoord.x / v2Resolution.x, gl_FragCoord.y / v2Resolution.y) - 0.5;
	//uv = fract(uv*10)-0.5;
	uv /= vec2(v2Resolution.y / v2Resolution.x, 1);

	
	vec3 ro = vec3(0,2,-10);
	
	//ro = vec3(0,0,-10);
    
	vec3 rd = normalize(vec3(cos(t/10)/6 * cos(2*t/10)/10,cos(t/10)/6 * cos(2*t/10)/1,1));
	
	//rd = vec3(0,-0.2,1);
	
	vec3 up = vec3(0,1,0);
	
	up = normalize(rotateVector(up, vec3(0,0,1), sin(t/4)*4));
	
	vec3 right = cross(rd, up);
	
	rd = normalize(rd  + up*uv.y + right*uv.x);
    
	vec3 color = computeColor(ro,rd);
     
	
	out_color = vec4(color,0);
	
}